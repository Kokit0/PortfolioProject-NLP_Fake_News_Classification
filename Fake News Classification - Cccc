{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem Statement : "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fake News Classification with The Help Of Natural Language Processing Technique. \n",
    "Fake news detection is a hot topic in the field of natural language processing.\n",
    "We consume news through several mediums throughout the day in our daily routine, but sometimes it becomes difficult to decide which one is fake and which one is authentic. Our job is to create a model which predicts whether a given news is real or fake."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Project Flow:\n",
    "    1. Problem Statement\n",
    "    2. Data Gathering\n",
    "    3. Data Preprocessing : Here we perform some operation on data\n",
    "        A. Tokenization\n",
    "        B. Lower Case\n",
    "        C. Stopwords \n",
    "        D. Lemmatization / Stemming\n",
    "    4. Vectorization (Convert Text data into the Vector):\n",
    "        A. Bag Of Words (CountVectorizer)\n",
    "        B. TF-IDF\n",
    "    5. Model Building :\n",
    "        A. Model Object Initialization\n",
    "        B. Train and Test Model\n",
    "    6. Model Evaluation :\n",
    "        A. Accuracy Score\n",
    "        B. Confusition Matrix\n",
    "        C. Classification Report\n",
    "    7. Model Deployment\n",
    "    8. Prediction on Client Data        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Required Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import re\n",
    "    import nltk\n",
    "    from nltk.corpus import stopwords\n",
    "    from nltk.stem import PorterStemmer, WordNetLemmatizer\n",
    "    from sklearn.model_selection import train_test_split\n",
    "    from sklearn.ensemble import RandomForestClassifier\n",
    "    from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "    from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "    import matplotlib.pyplot as plt\n",
    "    from wordcloud import WordCloud\n",
    "    import seaborn as sns\n",
    "    import os\n",
    "    \n",
    "except ImportError:\n",
    "    # If any package is not installed, print an error message or handle it as needed.\n",
    "    print(\"Some required packages are not installed! Have a looksie to see if something's missin'!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the \"output\" folder to store train and test data as CSV files\n",
    "current_directory = \"PortfolioProject-NLP_Fake_News_Classification\"\n",
    "output_folder = \"output\"\n",
    "output_directory = os.path.join(current_directory, output_folder)\n",
    "os.makedirs(output_directory, exist_ok=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Data Gathering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df = pd.read_csv(\"News_dataset.csv\")\n",
    "# df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "      <th>author</th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n",
       "      <td>Darrell Lucus</td>\n",
       "      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>FLYNN: Hillary Clinton, Big Woman on Campus - ...</td>\n",
       "      <td>Daniel J. Flynn</td>\n",
       "      <td>Ever get the feeling your life circles the rou...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Why the Truth Might Get You Fired</td>\n",
       "      <td>Consortiumnews.com</td>\n",
       "      <td>Why the Truth Might Get You Fired October 29, ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>15 Civilians Killed In Single US Airstrike Hav...</td>\n",
       "      <td>Jessica Purkiss</td>\n",
       "      <td>Videos 15 Civilians Killed In Single US Airstr...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Iranian woman jailed for fictional unpublished...</td>\n",
       "      <td>Howard Portnoy</td>\n",
       "      <td>Print \\nAn Iranian woman has been sentenced to...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                              title              author  \\\n",
       "0   0  House Dem Aide: We Didn’t Even See Comey’s Let...       Darrell Lucus   \n",
       "1   1  FLYNN: Hillary Clinton, Big Woman on Campus - ...     Daniel J. Flynn   \n",
       "2   2                  Why the Truth Might Get You Fired  Consortiumnews.com   \n",
       "3   3  15 Civilians Killed In Single US Airstrike Hav...     Jessica Purkiss   \n",
       "4   4  Iranian woman jailed for fictional unpublished...      Howard Portnoy   \n",
       "\n",
       "                                                text  label  \n",
       "0  House Dem Aide: We Didn’t Even See Comey’s Let...      1  \n",
       "1  Ever get the feeling your life circles the rou...      0  \n",
       "2  Why the Truth Might Get You Fired October 29, ...      1  \n",
       "3  Videos 15 Civilians Killed In Single US Airstr...      1  \n",
       "4  Print \\nAn Iranian woman has been sentenced to...      1  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "# Get the current working directory\n",
    "current_directory = os.getcwd()\n",
    "\n",
    "# Specify the input folder name\n",
    "input_folder = \"input\"\n",
    "\n",
    "# Specify the CSV filename\n",
    "csv_filename = \"News_dataset.csv\"\n",
    "\n",
    "# Join the current directory, input folder, and CSV filename to get the complete path\n",
    "csv_path = os.path.join(current_directory, input_folder, csv_filename)\n",
    "\n",
    "# Read the CSV file into a DataFrame\n",
    "df = pd.read_csv(csv_path)\n",
    "\n",
    "# Display the first few rows of the DataFrame\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lets visualize the content to do some tiny EDA stuff........... AGREGAR AQUI MAS COSITAS!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20800 entries, 0 to 20799\n",
      "Data columns (total 5 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   id      20800 non-null  int64 \n",
      " 1   title   20242 non-null  object\n",
      " 2   author  18843 non-null  object\n",
      " 3   text    20761 non-null  object\n",
      " 4   label   20800 non-null  int64 \n",
      "dtypes: int64(2), object(3)\n",
      "memory usage: 812.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "1    10413\n",
       "0    10387\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['label'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20800, 5)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id           0\n",
       "title      558\n",
       "author    1957\n",
       "text        39\n",
       "label        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna() #Handled Missing values by droping those rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id        0\n",
       "title     0\n",
       "author    0\n",
       "text      0\n",
       "label     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18285, 5)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "      <th>author</th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n",
       "      <td>Darrell Lucus</td>\n",
       "      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>FLYNN: Hillary Clinton, Big Woman on Campus - ...</td>\n",
       "      <td>Daniel J. Flynn</td>\n",
       "      <td>Ever get the feeling your life circles the rou...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Why the Truth Might Get You Fired</td>\n",
       "      <td>Consortiumnews.com</td>\n",
       "      <td>Why the Truth Might Get You Fired October 29, ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>15 Civilians Killed In Single US Airstrike Hav...</td>\n",
       "      <td>Jessica Purkiss</td>\n",
       "      <td>Videos 15 Civilians Killed In Single US Airstr...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>Iranian woman jailed for fictional unpublished...</td>\n",
       "      <td>Howard Portnoy</td>\n",
       "      <td>Print \\nAn Iranian woman has been sentenced to...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  id                                              title  \\\n",
       "0      0   0  House Dem Aide: We Didn’t Even See Comey’s Let...   \n",
       "1      1   1  FLYNN: Hillary Clinton, Big Woman on Campus - ...   \n",
       "2      2   2                  Why the Truth Might Get You Fired   \n",
       "3      3   3  15 Civilians Killed In Single US Airstrike Hav...   \n",
       "4      4   4  Iranian woman jailed for fictional unpublished...   \n",
       "\n",
       "               author                                               text  \\\n",
       "0       Darrell Lucus  House Dem Aide: We Didn’t Even See Comey’s Let...   \n",
       "1     Daniel J. Flynn  Ever get the feeling your life circles the rou...   \n",
       "2  Consortiumnews.com  Why the Truth Might Get You Fired October 29, ...   \n",
       "3     Jessica Purkiss  Videos 15 Civilians Killed In Single US Airstr...   \n",
       "4      Howard Portnoy  Print \\nAn Iranian woman has been sentenced to...   \n",
       "\n",
       "   label  \n",
       "0      1  \n",
       "1      0  \n",
       "2      1  \n",
       "3      1  \n",
       "4      1  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.reset_index(inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'House Dem Aide: We Didn’t Even See Comey’s Letter Until Jason Chaffetz Tweeted It'"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['title'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>title</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>House Dem Aide: We Didn’t Even See Comey’s Let...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>FLYNN: Hillary Clinton, Big Woman on Campus - ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Why the Truth Might Get You Fired</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>15 Civilians Killed In Single US Airstrike Hav...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Iranian woman jailed for fictional unpublished...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index                                              title  label\n",
       "0      0  House Dem Aide: We Didn’t Even See Comey’s Let...      1\n",
       "1      1  FLYNN: Hillary Clinton, Big Woman on Campus - ...      0\n",
       "2      2                  Why the Truth Might Get You Fired      1\n",
       "3      3  15 Civilians Killed In Single US Airstrike Hav...      1\n",
       "4      4  Iranian woman jailed for fictional unpublished...      1"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop(['id','text','author'],axis = 1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Data Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.Tokenization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_data = 'The quick brown fox jumps over the lazy dog'\n",
    "sample_data = sample_data.split()\n",
    "sample_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Make Lowercase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_data = [data.lower() for data in sample_data]\n",
    "sample_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Remove Stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\"]\n",
      "179\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\JorgeAmaya\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "# lets re-import Stopwords from nltk library (why? because its giving me the same issue of not loading the specific resource within nltk *shrug*).\n",
    "nltk.download('stopwords')\n",
    "\n",
    "\n",
    "stopwords = stopwords.words('english')\n",
    "print(stopwords[0:10])\n",
    "print(len(stopwords))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['quick', 'brown', 'fox', 'jumps', 'lazy', 'dog']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_data = [data for data in sample_data if data not in stopwords]\n",
    "print(sample_data)\n",
    "len(sample_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Stemming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['quick', 'brown', 'fox', 'jump', 'lazi', 'dog']\n"
     ]
    }
   ],
   "source": [
    "ps = PorterStemmer()\n",
    "sample_data_stemming = [ps.stem(data) for data in sample_data]\n",
    "print(sample_data_stemming)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Lemmatization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['quick', 'brown', 'fox', 'jump', 'lazy', 'dog']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\JorgeAmaya\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "#same here. I need to download the specific resource. *shrug again*\n",
    "\n",
    "nltk.download('wordnet')\n",
    "\n",
    "\n",
    "lm = WordNetLemmatizer()\n",
    "sample_data_lemma = [lm.lemmatize(data) for data in sample_data]\n",
    "print(sample_data_lemma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "lm = WordNetLemmatizer()\n",
    "corpus = []\n",
    "for i in range (len(df)):\n",
    "    review = re.sub('^a-zA-Z0-9',' ', df['title'][i])\n",
    "    review = review.lower()\n",
    "    review = review.split()\n",
    "    review = [lm.lemmatize(x) for x in review if x not in stopwords]\n",
    "    review = \" \".join(review)\n",
    "    corpus.append(review)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18285"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(corpus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'House Dem Aide: We Didn’t Even See Comey’s Letter Until Jason Chaffetz Tweeted It'"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['title'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'house dem aide: didn’t even see comey’s letter jason chaffetz tweeted'"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Vectorization (Convert Text data into the Vector)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf = TfidfVectorizer()\n",
    "x = tf.fit_transform(corpus).toarray()\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    0\n",
       "2    1\n",
       "3    1\n",
       "4    1\n",
       "Name: label, dtype: int64"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df['label']\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data splitting into the train and test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3, random_state = 10, stratify = y )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12799, 12799)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(x_train),len(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5486, 5486)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(x_test), len(y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = RandomForestClassifier()\n",
    "rf.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6. Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9382063434196135"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = rf.predict(x_test)\n",
    "accuracy_score_ = accuracy_score(y_test,y_pred) \n",
    "accuracy_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Evaluation:\n",
    "    \n",
    "    def __init__(self,model,x_train,x_test,y_train,y_test):\n",
    "        self.model = model\n",
    "        self.x_train = x_train\n",
    "        self.x_test = x_test\n",
    "        self.y_train = y_train\n",
    "        self.y_test = y_test\n",
    "        \n",
    "    def train_evaluation(self):\n",
    "        y_pred_train = self.model.predict(self.x_train)\n",
    "                \n",
    "        acc_scr_train = accuracy_score(self.y_train,y_pred_train)\n",
    "        print(\"Accuracy Score On Training Data Set :\",acc_scr_train)\n",
    "        print()\n",
    "        \n",
    "        con_mat_train = confusion_matrix(self.y_train,y_pred_train)\n",
    "        print(\"Confusion Matrix On Training Data Set :\\n\",con_mat_train)\n",
    "        print()\n",
    "        \n",
    "        class_rep_train = classification_report(self.y_train,y_pred_train)\n",
    "        print(\"Classification Report On Training Data Set :\\n\",class_rep_train)\n",
    "        \n",
    "        \n",
    "    def test_evaluation(self):\n",
    "        y_pred_test = self.model.predict(self.x_test)\n",
    "        \n",
    "        acc_scr_test = accuracy_score(self.y_test,y_pred_test)\n",
    "        print(\"Accuracy Score On Testing Data Set :\",acc_scr_test)\n",
    "        print()\n",
    "        \n",
    "        con_mat_test = confusion_matrix(self.y_test,y_pred_test)\n",
    "        print(\"Confusion Matrix On Testing Data Set :\\n\",con_mat_test)\n",
    "        print()\n",
    "        \n",
    "        class_rep_test = classification_report(self.y_test,y_pred_test)\n",
    "        print(\"Classification Report On Testing Data Set :\\n\",class_rep_test)       \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# Formato de reporte simplificado:\\n# Create an Evaluation object\\nevaluation = Evaluation(rf, x_train, x_test, y_train, y_test)\\n\\n# Call the train_evaluation and test_evaluation methods to print the results\\nprint(\"Training Dataset Evaluation:\")\\nevaluation.train_evaluation()\\n\\nprint(\"\\nTesting Dataset Evaluation:\")\\nevaluation.test_evaluation()\\n'"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "# Formato de reporte simplificado:\n",
    "# Create an Evaluation object\n",
    "evaluation = Evaluation(rf, x_train, x_test, y_train, y_test)\n",
    "\n",
    "# Call the train_evaluation and test_evaluation methods to print the results\n",
    "print(\"Training Dataset Evaluation:\")\n",
    "evaluation.train_evaluation()\n",
    "\n",
    "print(\"\\nTesting Dataset Evaluation:\")\n",
    "evaluation.test_evaluation()\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking the accuracy on training dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score On Training Data Set : 1.0\n",
      "\n",
      "Confusion Matrix On Training Data Set :\n",
      " [[7252    0]\n",
      " [   0 5547]]\n",
      "\n",
      "Classification Report On Training Data Set :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      7252\n",
      "           1       1.00      1.00      1.00      5547\n",
      "\n",
      "    accuracy                           1.00     12799\n",
      "   macro avg       1.00      1.00      1.00     12799\n",
      "weighted avg       1.00      1.00      1.00     12799\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Checking the accuracy on training dataset\n",
    "\n",
    "Evaluation(rf,x_train, x_test, y_train, y_test).train_evaluation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "### visualizing the accuracy of the training dataset ploting learning curve:\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import learning_curve\n",
    "\n",
    "def plot_learning_curve(estimator, X, y, train_sizes, cv, scoring):\n",
    "    train_sizes_abs, train_scores, test_scores = learning_curve(\n",
    "        estimator, X, y, train_sizes=train_sizes, cv=cv, scoring=scoring\n",
    "    )\n",
    "\n",
    "    # Calculate mean and standard deviation for training and testing scores\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    # Plot the learning curve\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    plt.plot(train_sizes_abs, train_scores_mean, 'o-', color='r', label='Training Score')\n",
    "    plt.fill_between(\n",
    "        train_sizes_abs,\n",
    "        train_scores_mean - train_scores_std,\n",
    "        train_scores_mean + train_scores_std,\n",
    "        alpha=0.1, color='r'\n",
    "    )\n",
    "    plt.plot(train_sizes_abs, test_scores_mean, 'o-', color='g', label='Cross-Validation Score')\n",
    "    plt.fill_between(\n",
    "        train_sizes_abs,\n",
    "        test_scores_mean - test_scores_std,\n",
    "        test_scores_mean + test_scores_std,\n",
    "        alpha=0.1, color='g'\n",
    "    )\n",
    "    plt.xlabel('Training Set Size')\n",
    "    plt.ylabel('Score')\n",
    "    plt.title('Learning Curve')\n",
    "    plt.legend(loc='best')\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "\n",
    "# Assuming you have the random forest classifier 'rf', and the train and test datasets\n",
    "train_sizes = np.linspace(0.1, 1.0, 10)  # Adjust the range as needed\n",
    "plot_learning_curve(rf, x_train, y_train, train_sizes, cv=5, scoring='accuracy')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking the accuracy on testing dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score On Testing Data Set : 0.9382063434196135\n",
      "\n",
      "Confusion Matrix On Testing Data Set :\n",
      " [[2829  280]\n",
      " [  59 2318]]\n",
      "\n",
      "Classification Report On Testing Data Set :\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.91      0.94      3109\n",
      "           1       0.89      0.98      0.93      2377\n",
      "\n",
      "    accuracy                           0.94      5486\n",
      "   macro avg       0.94      0.94      0.94      5486\n",
      "weighted avg       0.94      0.94      0.94      5486\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Checking the accuracy on testing dataset\n",
    "Evaluation(rf,x_train, x_test, y_train, y_test).test_evaluation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "from sklearn.metrics import precision_recall_curve, roc_curve, auc\n",
    "\n",
    "# Assuming you have predictions for the test data\n",
    "y_pred = rf.predict(x_test)\n",
    "\n",
    "# Plot the confusion matrix heatmap\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.title('Confusion Matrix Heatmap')\n",
    "plt.show()\n",
    "\n",
    "# Plot the precision-recall curve\n",
    "precision, recall, _ = precision_recall_curve(y_test, rf.predict_proba(x_test)[:, 1])\n",
    "plt.figure(figsize=(6, 4))\n",
    "plt.plot(recall, precision, color='b', lw=2)\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.title('Precision-Recall Curve')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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n58k6dSpU6ba//rrr/Ly8lKlSpXczoeEhCggIEC//vqr2/myZcvm6qN48eI6ceLEdY44ty5duqhhw4bq16+fgoOD1bVrV3366adXLSIujrNKlSq5rlWrVk1//PGHMjIy3M5fei/FixeXJEv30rZtWxUrVkwLFy7U/Pnzdd999+X6Li/KyclRbGys7r77bjmdTpUsWVKlSpXSjh07lJqaavoz77rrLksLId98800FBgYqISFB06dPV1BQkOn3ArgxFA645fn5+SksLEw//PCDpfddujjxSry9vS973jCM6/6Mi/PvF/n6+mrdunVauXKlnnnmGe3YsUNdunTRww8/nKvtjbiRe7nI6XSqU6dOmjt3rhYtWnTFtEGSXn/9dUVHR6tJkyb6+OOPtXz5csXFxemee+4xnaxIF74fK77//nsdOXJEkrRz505L7wVwYygccFto37699u3bp/j4+Gu2DQ8PV05Ojvbs2eN2PiUlRSdPnnTtkMgLxYsXd9uBcNGlqYYkeXl5qUWLFpoyZYp+/PFHvfbaa1q9erW+/vrry/Z9cZy7d+/Ode3nn39WyZIlVaRIkRu7gSvo1q2bvv/+e506deqyC0ov+te//qXmzZvrww8/VNeuXdWqVSu1bNky13ditogzIyMjQ71791b16tU1YMAATZw4UVu2bMmz/gFcHYUDbgsjR45UkSJF1K9fP6WkpOS6vm/fPk2bNk3ShahdUq6dD1OmTJEktWvXLs/GVbFiRaWmpmrHjh2uc4cPH9aiRYvc2h0/fjzXey8+COnSLaIXhYaGqk6dOpo7d67bH8Q//PCDVqxY4bpPT2jevLleeeUVzZgxQyEhIVds5+3tnSvN+Oyzz/T777+7nbtY4FyuyLJq1KhRSkpK0ty5czVlyhSVK1dOPXv2vOL3CCBv8QAo3BYqVqyoBQsWqEuXLqpWrZrbkyM3bNigzz77TL169ZIk1a5dWz179tR7772nkydPqmnTptq8ebPmzp2rjh07XnGr3/Xo2rWrRo0apccee0x//etfdfr0ac2cOVOVK1d2Wxw4YcIErVu3Tu3atVN4eLiOHDmid955R6VLl1ajRo2u2P+kSZPUpk0bRUREqG/fvjpz5ozeeust+fv7a9y4cXl2H5fy8vLSSy+9dM127du314QJE9S7d289+OCD2rlzp+bPn68KFSq4tatYsaIC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",
      "text/plain": [
       "<Figure size 600x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Assuming you have trained the model and predicted on test data we can now see our matrix of predictions\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot the confusion matrix as a heatmap\n",
    "plt.figure(figsize=(6, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prediction Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Preprocessing:\n",
    "    \n",
    "    def __init__(self,data):\n",
    "        self.data = data\n",
    "        \n",
    "    def text_preprocessing_user(self):\n",
    "        lm = WordNetLemmatizer()\n",
    "        pred_data = [self.data]    \n",
    "        preprocess_data = []\n",
    "        for data in pred_data:\n",
    "            review = re.sub('^a-zA-Z0-9',' ', data)\n",
    "            review = review.lower()\n",
    "            review = review.split()\n",
    "            review = [lm.lemmatize(x) for x in review if x not in stopwords]\n",
    "            review = \" \".join(review)\n",
    "            preprocess_data.append(review)\n",
    "        return preprocess_data    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'FLYNN: Hillary Clinton, Big Woman on Campus - Breitbart'"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['title'][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['flynn: hillary clinton, big woman campus - breitbart']"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = 'FLYNN: Hillary Clinton, Big Woman on Campus - Breitbart'\n",
    "Preprocessing(data).text_preprocessing_user()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Prediction:\n",
    "    \n",
    "    def __init__(self,pred_data, model):\n",
    "        self.pred_data = pred_data\n",
    "        self.model = model\n",
    "        \n",
    "    def prediction_model(self):\n",
    "        preprocess_data = Preprocessing(self.pred_data).text_preprocessing_user()\n",
    "        data = tf.transform(preprocess_data)\n",
    "        prediction = self.model.predict(data)\n",
    "        \n",
    "        if prediction [0] == 0 :\n",
    "            return \"The News Is Fake\"\n",
    "        \n",
    "        else:\n",
    "            return \"The News Is Real\"\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'The News Is Fake'"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = 'FLYNN: Hillary Clinton, Big Woman on Campus - Breitbart'\n",
    "Prediction(data,rf).prediction_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'15 Civilians Killed In Single US Airstrike Have Been Identified'"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['title'][3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'The News Is Real'"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_data = '15 Civilians Killed In Single US Airstrike Have Been Identified' \n",
    "Prediction(user_data,rf).prediction_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_test: (5486, 19259)\n",
      "Shape of y_pred: (5486,)\n"
     ]
    }
   ],
   "source": [
    "# quick check\n",
    "\n",
    "print(\"Shape of x_test:\", x_test.shape)\n",
    "print(\"Shape of y_pred:\", y_pred.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lets make this graphics WORKS!!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'list' object has no attribute 'lower'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[111], line 6\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[39m# Assuming you have separate training and testing data\u001b[39;00m\n\u001b[0;32m      5\u001b[0m tfidf_vectorizer \u001b[39m=\u001b[39m TfidfVectorizer(max_features\u001b[39m=\u001b[39m\u001b[39m1000\u001b[39m)\n\u001b[1;32m----> 6\u001b[0m tfidf_train \u001b[39m=\u001b[39m tfidf_vectorizer\u001b[39m.\u001b[39;49mfit_transform(x_train)\n\u001b[0;32m      7\u001b[0m tfidf_test \u001b[39m=\u001b[39m tfidf_vectorizer\u001b[39m.\u001b[39mtransform(x_test)\n\u001b[0;32m      9\u001b[0m \u001b[39m# Get the top TF-IDF words for each class\u001b[39;00m\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:2126\u001b[0m, in \u001b[0;36mTfidfVectorizer.fit_transform\u001b[1;34m(self, raw_documents, y)\u001b[0m\n\u001b[0;32m   2119\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_check_params()\n\u001b[0;32m   2120\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_tfidf \u001b[39m=\u001b[39m TfidfTransformer(\n\u001b[0;32m   2121\u001b[0m     norm\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39mnorm,\n\u001b[0;32m   2122\u001b[0m     use_idf\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39muse_idf,\n\u001b[0;32m   2123\u001b[0m     smooth_idf\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39msmooth_idf,\n\u001b[0;32m   2124\u001b[0m     sublinear_tf\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39msublinear_tf,\n\u001b[0;32m   2125\u001b[0m )\n\u001b[1;32m-> 2126\u001b[0m X \u001b[39m=\u001b[39m \u001b[39msuper\u001b[39;49m()\u001b[39m.\u001b[39;49mfit_transform(raw_documents)\n\u001b[0;32m   2127\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_tfidf\u001b[39m.\u001b[39mfit(X)\n\u001b[0;32m   2128\u001b[0m \u001b[39m# X is already a transformed view of raw_documents so\u001b[39;00m\n\u001b[0;32m   2129\u001b[0m \u001b[39m# we set copy to False\u001b[39;00m\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\sklearn\\base.py:1151\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1144\u001b[0m     estimator\u001b[39m.\u001b[39m_validate_params()\n\u001b[0;32m   1146\u001b[0m \u001b[39mwith\u001b[39;00m config_context(\n\u001b[0;32m   1147\u001b[0m     skip_parameter_validation\u001b[39m=\u001b[39m(\n\u001b[0;32m   1148\u001b[0m         prefer_skip_nested_validation \u001b[39mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1149\u001b[0m     )\n\u001b[0;32m   1150\u001b[0m ):\n\u001b[1;32m-> 1151\u001b[0m     \u001b[39mreturn\u001b[39;00m fit_method(estimator, \u001b[39m*\u001b[39margs, \u001b[39m*\u001b[39m\u001b[39m*\u001b[39mkwargs)\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:1383\u001b[0m, in \u001b[0;36mCountVectorizer.fit_transform\u001b[1;34m(self, raw_documents, y)\u001b[0m\n\u001b[0;32m   1375\u001b[0m             warnings\u001b[39m.\u001b[39mwarn(\n\u001b[0;32m   1376\u001b[0m                 \u001b[39m\"\u001b[39m\u001b[39mUpper case characters found in\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m   1377\u001b[0m                 \u001b[39m\"\u001b[39m\u001b[39m vocabulary while \u001b[39m\u001b[39m'\u001b[39m\u001b[39mlowercase\u001b[39m\u001b[39m'\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m   1378\u001b[0m                 \u001b[39m\"\u001b[39m\u001b[39m is True. These entries will not\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m   1379\u001b[0m                 \u001b[39m\"\u001b[39m\u001b[39m be matched with any documents\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m   1380\u001b[0m             )\n\u001b[0;32m   1381\u001b[0m             \u001b[39mbreak\u001b[39;00m\n\u001b[1;32m-> 1383\u001b[0m vocabulary, X \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_count_vocab(raw_documents, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mfixed_vocabulary_)\n\u001b[0;32m   1385\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mbinary:\n\u001b[0;32m   1386\u001b[0m     X\u001b[39m.\u001b[39mdata\u001b[39m.\u001b[39mfill(\u001b[39m1\u001b[39m)\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:1270\u001b[0m, in \u001b[0;36mCountVectorizer._count_vocab\u001b[1;34m(self, raw_documents, fixed_vocab)\u001b[0m\n\u001b[0;32m   1268\u001b[0m \u001b[39mfor\u001b[39;00m doc \u001b[39min\u001b[39;00m raw_documents:\n\u001b[0;32m   1269\u001b[0m     feature_counter \u001b[39m=\u001b[39m {}\n\u001b[1;32m-> 1270\u001b[0m     \u001b[39mfor\u001b[39;00m feature \u001b[39min\u001b[39;00m analyze(doc):\n\u001b[0;32m   1271\u001b[0m         \u001b[39mtry\u001b[39;00m:\n\u001b[0;32m   1272\u001b[0m             feature_idx \u001b[39m=\u001b[39m vocabulary[feature]\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:110\u001b[0m, in \u001b[0;36m_analyze\u001b[1;34m(doc, analyzer, tokenizer, ngrams, preprocessor, decoder, stop_words)\u001b[0m\n\u001b[0;32m    108\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[0;32m    109\u001b[0m     \u001b[39mif\u001b[39;00m preprocessor \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[1;32m--> 110\u001b[0m         doc \u001b[39m=\u001b[39m preprocessor(doc)\n\u001b[0;32m    111\u001b[0m     \u001b[39mif\u001b[39;00m tokenizer \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[0;32m    112\u001b[0m         doc \u001b[39m=\u001b[39m tokenizer(doc)\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:68\u001b[0m, in \u001b[0;36m_preprocess\u001b[1;34m(doc, accent_function, lower)\u001b[0m\n\u001b[0;32m     49\u001b[0m \u001b[39m\u001b[39m\u001b[39m\"\"\"Chain together an optional series of text preprocessing steps to\u001b[39;00m\n\u001b[0;32m     50\u001b[0m \u001b[39mapply to a document.\u001b[39;00m\n\u001b[0;32m     51\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     65\u001b[0m \u001b[39m    preprocessed string\u001b[39;00m\n\u001b[0;32m     66\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[0;32m     67\u001b[0m \u001b[39mif\u001b[39;00m lower:\n\u001b[1;32m---> 68\u001b[0m     doc \u001b[39m=\u001b[39m doc\u001b[39m.\u001b[39;49mlower()\n\u001b[0;32m     69\u001b[0m \u001b[39mif\u001b[39;00m accent_function \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[0;32m     70\u001b[0m     doc \u001b[39m=\u001b[39m accent_function(doc)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'list' object has no attribute 'lower'"
     ]
    }
   ],
   "source": [
    "# Convert x_train from a NumPy array to a list of strings\n",
    "x_train = x_train.tolist()\n",
    "\n",
    "# Assuming you have separate training and testing data\n",
    "tfidf_vectorizer = TfidfVectorizer(max_features=1000)\n",
    "tfidf_train = tfidf_vectorizer.fit_transform(x_train)\n",
    "tfidf_test = tfidf_vectorizer.transform(x_test)\n",
    "\n",
    "# Get the top TF-IDF words for each class\n",
    "top_words_per_class = {}\n",
    "for label in df['label'].unique():\n",
    "    tfidf_scores = tfidf_train[y_train == label].mean(axis=0).A1\n",
    "    top_indices = tfidf_scores.argsort()[-10:]\n",
    "    top_words = [tfidf_vectorizer.get_feature_names()[i] for i in top_indices]\n",
    "    top_words_per_class[label] = top_words\n",
    "\n",
    "# Plot the top TF-IDF words for each class\n",
    "for label, top_words in top_words_per_class.items():\n",
    "    plt.figure(figsize=(8, 4))\n",
    "    plt.barh(top_words, tfidf_vectorizer.transform([top_words]).toarray()[0])\n",
    "    plt.title(f'Top TF-IDF Words for {label}')\n",
    "    plt.xlabel('TF-IDF Score')\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lets try saving the output somewhere..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Length of values (5486) does not match length of index (18285)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[193], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[39m# Save the final output as a CSV file in the \"output\" folder\u001b[39;00m\n\u001b[0;32m      2\u001b[0m final_output_data \u001b[39m=\u001b[39m pd\u001b[39m.\u001b[39mDataFrame(data\u001b[39m=\u001b[39mdf[\u001b[39m\"\u001b[39m\u001b[39mtitle\u001b[39m\u001b[39m\"\u001b[39m], columns\u001b[39m=\u001b[39m[\u001b[39m\"\u001b[39m\u001b[39mtitle\u001b[39m\u001b[39m\"\u001b[39m])\n\u001b[1;32m----> 3\u001b[0m final_output_data[\u001b[39m\"\u001b[39;49m\u001b[39mlabel\u001b[39;49m\u001b[39m\"\u001b[39;49m] \u001b[39m=\u001b[39m y_pred\n\u001b[0;32m      4\u001b[0m final_output_data\u001b[39m.\u001b[39mindex \u001b[39m=\u001b[39m x_test\u001b[39m.\u001b[39mindex  \u001b[39m# Set the same indices as x_test\u001b[39;00m\n\u001b[0;32m      5\u001b[0m final_output_data\u001b[39m.\u001b[39mto_csv(os\u001b[39m.\u001b[39mpath\u001b[39m.\u001b[39mjoin(output_directory, \u001b[39m\"\u001b[39m\u001b[39mfinal_output.csv\u001b[39m\u001b[39m\"\u001b[39m), index\u001b[39m=\u001b[39m\u001b[39mFalse\u001b[39;00m)\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\pandas\\core\\frame.py:3950\u001b[0m, in \u001b[0;36mDataFrame.__setitem__\u001b[1;34m(self, key, value)\u001b[0m\n\u001b[0;32m   3947\u001b[0m     \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_setitem_array([key], value)\n\u001b[0;32m   3948\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[0;32m   3949\u001b[0m     \u001b[39m# set column\u001b[39;00m\n\u001b[1;32m-> 3950\u001b[0m     \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_set_item(key, value)\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\pandas\\core\\frame.py:4143\u001b[0m, in \u001b[0;36mDataFrame._set_item\u001b[1;34m(self, key, value)\u001b[0m\n\u001b[0;32m   4133\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39m_set_item\u001b[39m(\u001b[39mself\u001b[39m, key, value) \u001b[39m-\u001b[39m\u001b[39m>\u001b[39m \u001b[39mNone\u001b[39;00m:\n\u001b[0;32m   4134\u001b[0m \u001b[39m    \u001b[39m\u001b[39m\"\"\"\u001b[39;00m\n\u001b[0;32m   4135\u001b[0m \u001b[39m    Add series to DataFrame in specified column.\u001b[39;00m\n\u001b[0;32m   4136\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   4141\u001b[0m \u001b[39m    ensure homogeneity.\u001b[39;00m\n\u001b[0;32m   4142\u001b[0m \u001b[39m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 4143\u001b[0m     value \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_sanitize_column(value)\n\u001b[0;32m   4145\u001b[0m     \u001b[39mif\u001b[39;00m (\n\u001b[0;32m   4146\u001b[0m         key \u001b[39min\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mcolumns\n\u001b[0;32m   4147\u001b[0m         \u001b[39mand\u001b[39;00m value\u001b[39m.\u001b[39mndim \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m\n\u001b[0;32m   4148\u001b[0m         \u001b[39mand\u001b[39;00m \u001b[39mnot\u001b[39;00m is_extension_array_dtype(value)\n\u001b[0;32m   4149\u001b[0m     ):\n\u001b[0;32m   4150\u001b[0m         \u001b[39m# broadcast across multiple columns if necessary\u001b[39;00m\n\u001b[0;32m   4151\u001b[0m         \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mcolumns\u001b[39m.\u001b[39mis_unique \u001b[39mor\u001b[39;00m \u001b[39misinstance\u001b[39m(\u001b[39mself\u001b[39m\u001b[39m.\u001b[39mcolumns, MultiIndex):\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\pandas\\core\\frame.py:4870\u001b[0m, in \u001b[0;36mDataFrame._sanitize_column\u001b[1;34m(self, value)\u001b[0m\n\u001b[0;32m   4867\u001b[0m     \u001b[39mreturn\u001b[39;00m _reindex_for_setitem(Series(value), \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mindex)\n\u001b[0;32m   4869\u001b[0m \u001b[39mif\u001b[39;00m is_list_like(value):\n\u001b[1;32m-> 4870\u001b[0m     com\u001b[39m.\u001b[39;49mrequire_length_match(value, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mindex)\n\u001b[0;32m   4871\u001b[0m \u001b[39mreturn\u001b[39;00m sanitize_array(value, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mindex, copy\u001b[39m=\u001b[39m\u001b[39mTrue\u001b[39;00m, allow_2d\u001b[39m=\u001b[39m\u001b[39mTrue\u001b[39;00m)\n",
      "File \u001b[1;32me:\\OneDrive\\Documents\\PortfolioProject-NLP_Fake_News_Classification\\venv\\lib\\site-packages\\pandas\\core\\common.py:576\u001b[0m, in \u001b[0;36mrequire_length_match\u001b[1;34m(data, index)\u001b[0m\n\u001b[0;32m    572\u001b[0m \u001b[39m\u001b[39m\u001b[39m\"\"\"\u001b[39;00m\n\u001b[0;32m    573\u001b[0m \u001b[39mCheck the length of data matches the length of the index.\u001b[39;00m\n\u001b[0;32m    574\u001b[0m \u001b[39m\"\"\"\u001b[39;00m\n\u001b[0;32m    575\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mlen\u001b[39m(data) \u001b[39m!=\u001b[39m \u001b[39mlen\u001b[39m(index):\n\u001b[1;32m--> 576\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(\n\u001b[0;32m    577\u001b[0m         \u001b[39m\"\u001b[39m\u001b[39mLength of values \u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m    578\u001b[0m         \u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39m(\u001b[39m\u001b[39m{\u001b[39;00m\u001b[39mlen\u001b[39m(data)\u001b[39m}\u001b[39;00m\u001b[39m) \u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m    579\u001b[0m         \u001b[39m\"\u001b[39m\u001b[39mdoes not match length of index \u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m    580\u001b[0m         \u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39m(\u001b[39m\u001b[39m{\u001b[39;00m\u001b[39mlen\u001b[39m(index)\u001b[39m}\u001b[39;00m\u001b[39m)\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m    581\u001b[0m     )\n",
      "\u001b[1;31mValueError\u001b[0m: Length of values (5486) does not match length of index (18285)"
     ]
    }
   ],
   "source": [
    "# Save the final output as a CSV file in the \"output\" folder\n",
    "final_output_data = pd.DataFrame(data=df[\"title\"], columns=[\"title\"])\n",
    "final_output_data[\"label\"] = y_pred\n",
    "final_output_data.index = x_test.index  # Set the same indices as x_test\n",
    "final_output_data.to_csv(os.path.join(output_directory, \"final_output.csv\"), index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
